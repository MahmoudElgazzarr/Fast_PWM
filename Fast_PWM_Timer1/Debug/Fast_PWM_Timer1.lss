
Fast_PWM_Timer1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000532  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000586  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000586  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000072d  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c9  00000000  00000000  00000da1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004fe  00000000  00000000  0000136a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00001868  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000380  00000000  00000000  00001984  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001de  00000000  00000000  00001d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001ee2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 16 02 	call	0x42c	; 0x42c <main>
  64:	0c 94 97 02 	jmp	0x52e	; 0x52e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_WritePin>:
#include "DIO_Registers.h"
#include "DIO_Registers_Definitions.h"
#include "BitwiseOperation.h"

void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_WritePin+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
  76:	89 83       	std	Y+1, r24	; 0x01
  78:	6a 83       	std	Y+2, r22	; 0x02
	if(PinNum >= 0 && PinNum < 8 )
  7a:	89 81       	ldd	r24, Y+1	; 0x01
  7c:	88 30       	cpi	r24, 0x08	; 8
  7e:	78 f5       	brcc	.+94     	; 0xde <DIO_WritePin+0x72>
	{
			if(PinValue == 1)
  80:	8a 81       	ldd	r24, Y+2	; 0x02
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	a1 f4       	brne	.+40     	; 0xae <DIO_WritePin+0x42>
			{
				Set_Bit( PORTA , PinNum);
  86:	8b e3       	ldi	r24, 0x3B	; 59
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	2b e3       	ldi	r18, 0x3B	; 59
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	f9 01       	movw	r30, r18
  90:	20 81       	ld	r18, Z
  92:	62 2f       	mov	r22, r18
  94:	29 81       	ldd	r18, Y+1	; 0x01
  96:	42 2f       	mov	r20, r18
  98:	50 e0       	ldi	r21, 0x00	; 0
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <DIO_WritePin+0x38>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	4a 95       	dec	r20
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <DIO_WritePin+0x34>
  a8:	26 2b       	or	r18, r22
  aa:	fc 01       	movw	r30, r24
  ac:	20 83       	st	Z, r18
			}
			if(PinValue == 0)
  ae:	8a 81       	ldd	r24, Y+2	; 0x02
  b0:	88 23       	and	r24, r24
  b2:	a9 f4       	brne	.+42     	; 0xde <DIO_WritePin+0x72>
			{
				Clear_Bit( PORTA , PinNum);
  b4:	8b e3       	ldi	r24, 0x3B	; 59
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	2b e3       	ldi	r18, 0x3B	; 59
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	f9 01       	movw	r30, r18
  be:	20 81       	ld	r18, Z
  c0:	62 2f       	mov	r22, r18
  c2:	29 81       	ldd	r18, Y+1	; 0x01
  c4:	42 2f       	mov	r20, r18
  c6:	50 e0       	ldi	r21, 0x00	; 0
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_WritePin+0x66>
  ce:	22 0f       	add	r18, r18
  d0:	33 1f       	adc	r19, r19
  d2:	4a 95       	dec	r20
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_WritePin+0x62>
  d6:	20 95       	com	r18
  d8:	26 23       	and	r18, r22
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
			}
	}
	if(PinNum > 7 && PinNum < 16)
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	88 30       	cpi	r24, 0x08	; 8
  e2:	c0 f1       	brcs	.+112    	; 0x154 <DIO_WritePin+0xe8>
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	80 31       	cpi	r24, 0x10	; 16
  e8:	a8 f5       	brcc	.+106    	; 0x154 <DIO_WritePin+0xe8>
	{
		if(PinValue == 1)
  ea:	8a 81       	ldd	r24, Y+2	; 0x02
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	b9 f4       	brne	.+46     	; 0x11e <DIO_WritePin+0xb2>
		{
			Set_Bit( PORTB , (PinNum-8));
  f0:	88 e3       	ldi	r24, 0x38	; 56
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	28 e3       	ldi	r18, 0x38	; 56
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	f9 01       	movw	r30, r18
  fa:	20 81       	ld	r18, Z
  fc:	62 2f       	mov	r22, r18
  fe:	29 81       	ldd	r18, Y+1	; 0x01
 100:	22 2f       	mov	r18, r18
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	a9 01       	movw	r20, r18
 106:	48 50       	subi	r20, 0x08	; 8
 108:	51 09       	sbc	r21, r1
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_WritePin+0xa8>
 110:	22 0f       	add	r18, r18
 112:	33 1f       	adc	r19, r19
 114:	4a 95       	dec	r20
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_WritePin+0xa4>
 118:	26 2b       	or	r18, r22
 11a:	fc 01       	movw	r30, r24
 11c:	20 83       	st	Z, r18
		}
		if(PinValue == 0)
 11e:	8a 81       	ldd	r24, Y+2	; 0x02
 120:	88 23       	and	r24, r24
 122:	c1 f4       	brne	.+48     	; 0x154 <DIO_WritePin+0xe8>
		{
			Clear_Bit( PORTB , (PinNum-8));
 124:	88 e3       	ldi	r24, 0x38	; 56
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	28 e3       	ldi	r18, 0x38	; 56
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	f9 01       	movw	r30, r18
 12e:	20 81       	ld	r18, Z
 130:	62 2f       	mov	r22, r18
 132:	29 81       	ldd	r18, Y+1	; 0x01
 134:	22 2f       	mov	r18, r18
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	a9 01       	movw	r20, r18
 13a:	48 50       	subi	r20, 0x08	; 8
 13c:	51 09       	sbc	r21, r1
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_WritePin+0xdc>
 144:	22 0f       	add	r18, r18
 146:	33 1f       	adc	r19, r19
 148:	4a 95       	dec	r20
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_WritePin+0xd8>
 14c:	20 95       	com	r18
 14e:	26 23       	and	r18, r22
 150:	fc 01       	movw	r30, r24
 152:	20 83       	st	Z, r18
		}
	}
	if(PinNum > 15 && PinNum < 24)
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	80 31       	cpi	r24, 0x10	; 16
 158:	c0 f1       	brcs	.+112    	; 0x1ca <DIO_WritePin+0x15e>
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	88 31       	cpi	r24, 0x18	; 24
 15e:	a8 f5       	brcc	.+106    	; 0x1ca <DIO_WritePin+0x15e>
	{
		if(PinValue == 1)
 160:	8a 81       	ldd	r24, Y+2	; 0x02
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	b9 f4       	brne	.+46     	; 0x194 <DIO_WritePin+0x128>
		{
			Set_Bit( PORTC , (PinNum-16));
 166:	85 e3       	ldi	r24, 0x35	; 53
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	25 e3       	ldi	r18, 0x35	; 53
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	f9 01       	movw	r30, r18
 170:	20 81       	ld	r18, Z
 172:	62 2f       	mov	r22, r18
 174:	29 81       	ldd	r18, Y+1	; 0x01
 176:	22 2f       	mov	r18, r18
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	a9 01       	movw	r20, r18
 17c:	40 51       	subi	r20, 0x10	; 16
 17e:	51 09       	sbc	r21, r1
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_WritePin+0x11e>
 186:	22 0f       	add	r18, r18
 188:	33 1f       	adc	r19, r19
 18a:	4a 95       	dec	r20
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_WritePin+0x11a>
 18e:	26 2b       	or	r18, r22
 190:	fc 01       	movw	r30, r24
 192:	20 83       	st	Z, r18
		}
		if(PinValue == 0)
 194:	8a 81       	ldd	r24, Y+2	; 0x02
 196:	88 23       	and	r24, r24
 198:	c1 f4       	brne	.+48     	; 0x1ca <DIO_WritePin+0x15e>
		{
			Clear_Bit( PORTC , (PinNum-16));
 19a:	85 e3       	ldi	r24, 0x35	; 53
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	25 e3       	ldi	r18, 0x35	; 53
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	f9 01       	movw	r30, r18
 1a4:	20 81       	ld	r18, Z
 1a6:	62 2f       	mov	r22, r18
 1a8:	29 81       	ldd	r18, Y+1	; 0x01
 1aa:	22 2f       	mov	r18, r18
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	a9 01       	movw	r20, r18
 1b0:	40 51       	subi	r20, 0x10	; 16
 1b2:	51 09       	sbc	r21, r1
 1b4:	21 e0       	ldi	r18, 0x01	; 1
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_WritePin+0x152>
 1ba:	22 0f       	add	r18, r18
 1bc:	33 1f       	adc	r19, r19
 1be:	4a 95       	dec	r20
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_WritePin+0x14e>
 1c2:	20 95       	com	r18
 1c4:	26 23       	and	r18, r22
 1c6:	fc 01       	movw	r30, r24
 1c8:	20 83       	st	Z, r18
		}
	}
	
	if(PinNum > 24 && PinNum < 32)
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	89 31       	cpi	r24, 0x19	; 25
 1ce:	c0 f1       	brcs	.+112    	; 0x240 <DIO_WritePin+0x1d4>
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	80 32       	cpi	r24, 0x20	; 32
 1d4:	a8 f5       	brcc	.+106    	; 0x240 <DIO_WritePin+0x1d4>
	{
			if(PinValue == 1)
 1d6:	8a 81       	ldd	r24, Y+2	; 0x02
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	b9 f4       	brne	.+46     	; 0x20a <DIO_WritePin+0x19e>
			{
				Set_Bit( PORTD , (PinNum-24));
 1dc:	82 e3       	ldi	r24, 0x32	; 50
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	22 e3       	ldi	r18, 0x32	; 50
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	f9 01       	movw	r30, r18
 1e6:	20 81       	ld	r18, Z
 1e8:	62 2f       	mov	r22, r18
 1ea:	29 81       	ldd	r18, Y+1	; 0x01
 1ec:	22 2f       	mov	r18, r18
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	a9 01       	movw	r20, r18
 1f2:	48 51       	subi	r20, 0x18	; 24
 1f4:	51 09       	sbc	r21, r1
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_WritePin+0x194>
 1fc:	22 0f       	add	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	4a 95       	dec	r20
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_WritePin+0x190>
 204:	26 2b       	or	r18, r22
 206:	fc 01       	movw	r30, r24
 208:	20 83       	st	Z, r18
			}
			if(PinValue == 0)
 20a:	8a 81       	ldd	r24, Y+2	; 0x02
 20c:	88 23       	and	r24, r24
 20e:	c1 f4       	brne	.+48     	; 0x240 <DIO_WritePin+0x1d4>
			{
				Clear_Bit( PORTD , (PinNum-24));
 210:	82 e3       	ldi	r24, 0x32	; 50
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	22 e3       	ldi	r18, 0x32	; 50
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	f9 01       	movw	r30, r18
 21a:	20 81       	ld	r18, Z
 21c:	62 2f       	mov	r22, r18
 21e:	29 81       	ldd	r18, Y+1	; 0x01
 220:	22 2f       	mov	r18, r18
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	a9 01       	movw	r20, r18
 226:	48 51       	subi	r20, 0x18	; 24
 228:	51 09       	sbc	r21, r1
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_WritePin+0x1c8>
 230:	22 0f       	add	r18, r18
 232:	33 1f       	adc	r19, r19
 234:	4a 95       	dec	r20
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_WritePin+0x1c4>
 238:	20 95       	com	r18
 23a:	26 23       	and	r18, r22
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18
			}
	}
}
 240:	00 00       	nop
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <DIO_SetPinDirection>:
/*
pindirection = 1 output
pindirection = 0 input
*/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	00 d0       	rcall	.+0      	; 0x252 <DIO_SetPinDirection+0x6>
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	89 83       	std	Y+1, r24	; 0x01
 258:	6a 83       	std	Y+2, r22	; 0x02
		if(PinNum >= 0 && PinNum < 8 )
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	88 30       	cpi	r24, 0x08	; 8
 25e:	78 f5       	brcc	.+94     	; 0x2be <DIO_SetPinDirection+0x72>
		{
			if(PinDirection== 1)
 260:	8a 81       	ldd	r24, Y+2	; 0x02
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	a1 f4       	brne	.+40     	; 0x28e <DIO_SetPinDirection+0x42>
			{
				Set_Bit( DDRA , PinNum);
 266:	8a e3       	ldi	r24, 0x3A	; 58
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	2a e3       	ldi	r18, 0x3A	; 58
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	f9 01       	movw	r30, r18
 270:	20 81       	ld	r18, Z
 272:	62 2f       	mov	r22, r18
 274:	29 81       	ldd	r18, Y+1	; 0x01
 276:	42 2f       	mov	r20, r18
 278:	50 e0       	ldi	r21, 0x00	; 0
 27a:	21 e0       	ldi	r18, 0x01	; 1
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_SetPinDirection+0x38>
 280:	22 0f       	add	r18, r18
 282:	33 1f       	adc	r19, r19
 284:	4a 95       	dec	r20
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_SetPinDirection+0x34>
 288:	26 2b       	or	r18, r22
 28a:	fc 01       	movw	r30, r24
 28c:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
 28e:	8a 81       	ldd	r24, Y+2	; 0x02
 290:	88 23       	and	r24, r24
 292:	a9 f4       	brne	.+42     	; 0x2be <DIO_SetPinDirection+0x72>
			{
				Clear_Bit( DDRA , PinNum);
 294:	8a e3       	ldi	r24, 0x3A	; 58
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	2a e3       	ldi	r18, 0x3A	; 58
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	f9 01       	movw	r30, r18
 29e:	20 81       	ld	r18, Z
 2a0:	62 2f       	mov	r22, r18
 2a2:	29 81       	ldd	r18, Y+1	; 0x01
 2a4:	42 2f       	mov	r20, r18
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	21 e0       	ldi	r18, 0x01	; 1
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_SetPinDirection+0x66>
 2ae:	22 0f       	add	r18, r18
 2b0:	33 1f       	adc	r19, r19
 2b2:	4a 95       	dec	r20
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_SetPinDirection+0x62>
 2b6:	20 95       	com	r18
 2b8:	26 23       	and	r18, r22
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 83       	st	Z, r18
			}
		}
		if(PinNum > 7 && PinNum < 16)
 2be:	89 81       	ldd	r24, Y+1	; 0x01
 2c0:	88 30       	cpi	r24, 0x08	; 8
 2c2:	c0 f1       	brcs	.+112    	; 0x334 <DIO_SetPinDirection+0xe8>
 2c4:	89 81       	ldd	r24, Y+1	; 0x01
 2c6:	80 31       	cpi	r24, 0x10	; 16
 2c8:	a8 f5       	brcc	.+106    	; 0x334 <DIO_SetPinDirection+0xe8>
		{
			if(PinDirection== 1)
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	b9 f4       	brne	.+46     	; 0x2fe <DIO_SetPinDirection+0xb2>
			{
				Set_Bit( DDRB , (PinNum-8));
 2d0:	87 e3       	ldi	r24, 0x37	; 55
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	27 e3       	ldi	r18, 0x37	; 55
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	f9 01       	movw	r30, r18
 2da:	20 81       	ld	r18, Z
 2dc:	62 2f       	mov	r22, r18
 2de:	29 81       	ldd	r18, Y+1	; 0x01
 2e0:	22 2f       	mov	r18, r18
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	a9 01       	movw	r20, r18
 2e6:	48 50       	subi	r20, 0x08	; 8
 2e8:	51 09       	sbc	r21, r1
 2ea:	21 e0       	ldi	r18, 0x01	; 1
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_SetPinDirection+0xa8>
 2f0:	22 0f       	add	r18, r18
 2f2:	33 1f       	adc	r19, r19
 2f4:	4a 95       	dec	r20
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_SetPinDirection+0xa4>
 2f8:	26 2b       	or	r18, r22
 2fa:	fc 01       	movw	r30, r24
 2fc:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
 2fe:	8a 81       	ldd	r24, Y+2	; 0x02
 300:	88 23       	and	r24, r24
 302:	c1 f4       	brne	.+48     	; 0x334 <DIO_SetPinDirection+0xe8>
			{
				Clear_Bit( DDRB , (PinNum-8));
 304:	87 e3       	ldi	r24, 0x37	; 55
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	27 e3       	ldi	r18, 0x37	; 55
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	f9 01       	movw	r30, r18
 30e:	20 81       	ld	r18, Z
 310:	62 2f       	mov	r22, r18
 312:	29 81       	ldd	r18, Y+1	; 0x01
 314:	22 2f       	mov	r18, r18
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	a9 01       	movw	r20, r18
 31a:	48 50       	subi	r20, 0x08	; 8
 31c:	51 09       	sbc	r21, r1
 31e:	21 e0       	ldi	r18, 0x01	; 1
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_SetPinDirection+0xdc>
 324:	22 0f       	add	r18, r18
 326:	33 1f       	adc	r19, r19
 328:	4a 95       	dec	r20
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_SetPinDirection+0xd8>
 32c:	20 95       	com	r18
 32e:	26 23       	and	r18, r22
 330:	fc 01       	movw	r30, r24
 332:	20 83       	st	Z, r18
			}
		}
		if(PinNum > 15 && PinNum < 24)
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	80 31       	cpi	r24, 0x10	; 16
 338:	c0 f1       	brcs	.+112    	; 0x3aa <DIO_SetPinDirection+0x15e>
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	88 31       	cpi	r24, 0x18	; 24
 33e:	a8 f5       	brcc	.+106    	; 0x3aa <DIO_SetPinDirection+0x15e>
		{
			if(PinDirection== 1)
 340:	8a 81       	ldd	r24, Y+2	; 0x02
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	b9 f4       	brne	.+46     	; 0x374 <DIO_SetPinDirection+0x128>
			{
				Set_Bit( DDRC , (PinNum-16));
 346:	84 e3       	ldi	r24, 0x34	; 52
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	24 e3       	ldi	r18, 0x34	; 52
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	f9 01       	movw	r30, r18
 350:	20 81       	ld	r18, Z
 352:	62 2f       	mov	r22, r18
 354:	29 81       	ldd	r18, Y+1	; 0x01
 356:	22 2f       	mov	r18, r18
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	a9 01       	movw	r20, r18
 35c:	40 51       	subi	r20, 0x10	; 16
 35e:	51 09       	sbc	r21, r1
 360:	21 e0       	ldi	r18, 0x01	; 1
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_SetPinDirection+0x11e>
 366:	22 0f       	add	r18, r18
 368:	33 1f       	adc	r19, r19
 36a:	4a 95       	dec	r20
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_SetPinDirection+0x11a>
 36e:	26 2b       	or	r18, r22
 370:	fc 01       	movw	r30, r24
 372:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
 374:	8a 81       	ldd	r24, Y+2	; 0x02
 376:	88 23       	and	r24, r24
 378:	c1 f4       	brne	.+48     	; 0x3aa <DIO_SetPinDirection+0x15e>
			{
				Clear_Bit( DDRC , (PinNum-16));
 37a:	84 e3       	ldi	r24, 0x34	; 52
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	24 e3       	ldi	r18, 0x34	; 52
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	f9 01       	movw	r30, r18
 384:	20 81       	ld	r18, Z
 386:	62 2f       	mov	r22, r18
 388:	29 81       	ldd	r18, Y+1	; 0x01
 38a:	22 2f       	mov	r18, r18
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	a9 01       	movw	r20, r18
 390:	40 51       	subi	r20, 0x10	; 16
 392:	51 09       	sbc	r21, r1
 394:	21 e0       	ldi	r18, 0x01	; 1
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_SetPinDirection+0x152>
 39a:	22 0f       	add	r18, r18
 39c:	33 1f       	adc	r19, r19
 39e:	4a 95       	dec	r20
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_SetPinDirection+0x14e>
 3a2:	20 95       	com	r18
 3a4:	26 23       	and	r18, r22
 3a6:	fc 01       	movw	r30, r24
 3a8:	20 83       	st	Z, r18
			}
		}
		
		if(PinNum > 24 && PinNum < 32)
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	89 31       	cpi	r24, 0x19	; 25
 3ae:	c0 f1       	brcs	.+112    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3b0:	89 81       	ldd	r24, Y+1	; 0x01
 3b2:	80 32       	cpi	r24, 0x20	; 32
 3b4:	a8 f5       	brcc	.+106    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		{
			if(PinDirection== 1)
 3b6:	8a 81       	ldd	r24, Y+2	; 0x02
 3b8:	81 30       	cpi	r24, 0x01	; 1
 3ba:	b9 f4       	brne	.+46     	; 0x3ea <DIO_SetPinDirection+0x19e>
			{
				Set_Bit( DDRD , (PinNum-24));
 3bc:	81 e3       	ldi	r24, 0x31	; 49
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	21 e3       	ldi	r18, 0x31	; 49
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	f9 01       	movw	r30, r18
 3c6:	20 81       	ld	r18, Z
 3c8:	62 2f       	mov	r22, r18
 3ca:	29 81       	ldd	r18, Y+1	; 0x01
 3cc:	22 2f       	mov	r18, r18
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	a9 01       	movw	r20, r18
 3d2:	48 51       	subi	r20, 0x18	; 24
 3d4:	51 09       	sbc	r21, r1
 3d6:	21 e0       	ldi	r18, 0x01	; 1
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_SetPinDirection+0x194>
 3dc:	22 0f       	add	r18, r18
 3de:	33 1f       	adc	r19, r19
 3e0:	4a 95       	dec	r20
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_SetPinDirection+0x190>
 3e4:	26 2b       	or	r18, r22
 3e6:	fc 01       	movw	r30, r24
 3e8:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
 3ea:	8a 81       	ldd	r24, Y+2	; 0x02
 3ec:	88 23       	and	r24, r24
 3ee:	c1 f4       	brne	.+48     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
			{
				Clear_Bit( DDRD , (PinNum-24));
 3f0:	81 e3       	ldi	r24, 0x31	; 49
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	21 e3       	ldi	r18, 0x31	; 49
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	f9 01       	movw	r30, r18
 3fa:	20 81       	ld	r18, Z
 3fc:	62 2f       	mov	r22, r18
 3fe:	29 81       	ldd	r18, Y+1	; 0x01
 400:	22 2f       	mov	r18, r18
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	a9 01       	movw	r20, r18
 406:	48 51       	subi	r20, 0x18	; 24
 408:	51 09       	sbc	r21, r1
 40a:	21 e0       	ldi	r18, 0x01	; 1
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 410:	22 0f       	add	r18, r18
 412:	33 1f       	adc	r19, r19
 414:	4a 95       	dec	r20
 416:	e2 f7       	brpl	.-8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 418:	20 95       	com	r18
 41a:	26 23       	and	r18, r22
 41c:	fc 01       	movw	r30, r24
 41e:	20 83       	st	Z, r18
			}
		}
}
 420:	00 00       	nop
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	08 95       	ret

0000042c <main>:
#include "DIO_Registers.h"
#include "Timer1.h"


int main(void)
{
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
 430:	cd b7       	in	r28, 0x3d	; 61
 432:	de b7       	in	r29, 0x3e	; 62
	/*Setting Direction For Motor 1 Right or Left*/
	DIO_SetPinDirection(PIN26 , OUTPUT);
 434:	61 e0       	ldi	r22, 0x01	; 1
 436:	8a e1       	ldi	r24, 0x1A	; 26
 438:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN27 , OUTPUT);
 43c:	61 e0       	ldi	r22, 0x01	; 1
 43e:	8b e1       	ldi	r24, 0x1B	; 27
 440:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_SetPinDirection>
	/*Setting Direction For Motor 2 Right or Left*/
	DIO_SetPinDirection(PIN30 , OUTPUT);
 444:	61 e0       	ldi	r22, 0x01	; 1
 446:	8e e1       	ldi	r24, 0x1E	; 30
 448:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN31 , OUTPUT);
 44c:	61 e0       	ldi	r22, 0x01	; 1
 44e:	8f e1       	ldi	r24, 0x1F	; 31
 450:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_SetPinDirection>
	
	
	/*Setting Direction For Motor 2*/
	DIO_WritePin(PIN30,HIGH);
 454:	61 e0       	ldi	r22, 0x01	; 1
 456:	8e e1       	ldi	r24, 0x1E	; 30
 458:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
	DIO_WritePin(PIN31,LOW);
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	8f e1       	ldi	r24, 0x1F	; 31
 460:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
	/*intailize PWM*/
	Pwm_init();
 464:	0e 94 35 02 	call	0x46a	; 0x46a <Pwm_init>
    while (1) 
    {
    }
 468:	ff cf       	rjmp	.-2      	; 0x468 <main+0x3c>

0000046a <Pwm_init>:
#include "DIO_Registers.h"
#include "DIO_Registers_Definitions.h"
#include "Timer1.h"

void Pwm_init()
{
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
	/*Set Pin Direction For Pins as OUTPUT*/
	DIO_SetPinDirection(PIN28 , OUTPUT);
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	8c e1       	ldi	r24, 0x1C	; 28
 476:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN29 , OUTPUT);
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	8d e1       	ldi	r24, 0x1D	; 29
 47e:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_SetPinDirection>
	/*TCNT1H equal zero and TCNT1L equal zero*/
	TCNT1H = 0x00;
 482:	8d e4       	ldi	r24, 0x4D	; 77
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	fc 01       	movw	r30, r24
 488:	10 82       	st	Z, r1
	TCNT1L = 0x00;
 48a:	8c e4       	ldi	r24, 0x4C	; 76
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	fc 01       	movw	r30, r24
 490:	10 82       	st	Z, r1
	/*Timer Counter Control Register*/
	TCCR1A |= (1<<COM1A0);
 492:	8f e4       	ldi	r24, 0x4F	; 79
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	2f e4       	ldi	r18, 0x4F	; 79
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	f9 01       	movw	r30, r18
 49c:	20 81       	ld	r18, Z
 49e:	20 64       	ori	r18, 0x40	; 64
 4a0:	fc 01       	movw	r30, r24
 4a2:	20 83       	st	Z, r18
	TCCR1B |= (1<<COM1A1);
 4a4:	8e e4       	ldi	r24, 0x4E	; 78
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	2e e4       	ldi	r18, 0x4E	; 78
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	f9 01       	movw	r30, r18
 4ae:	20 81       	ld	r18, Z
 4b0:	20 68       	ori	r18, 0x80	; 128
 4b2:	fc 01       	movw	r30, r24
 4b4:	20 83       	st	Z, r18
	/*Set For Mode 14 For OCR1A*/
	TCCR1A &=~(1<<WGM10);
 4b6:	8f e4       	ldi	r24, 0x4F	; 79
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	2f e4       	ldi	r18, 0x4F	; 79
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	f9 01       	movw	r30, r18
 4c0:	20 81       	ld	r18, Z
 4c2:	2e 7f       	andi	r18, 0xFE	; 254
 4c4:	fc 01       	movw	r30, r24
 4c6:	20 83       	st	Z, r18
	TCCR1A |= (1<<WGM11);
 4c8:	8f e4       	ldi	r24, 0x4F	; 79
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	2f e4       	ldi	r18, 0x4F	; 79
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	f9 01       	movw	r30, r18
 4d2:	20 81       	ld	r18, Z
 4d4:	22 60       	ori	r18, 0x02	; 2
 4d6:	fc 01       	movw	r30, r24
 4d8:	20 83       	st	Z, r18
	/*For Mode 14 For OCR1B */
	TCCR1B |= (1<<WGM12);
 4da:	8e e4       	ldi	r24, 0x4E	; 78
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	2e e4       	ldi	r18, 0x4E	; 78
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	f9 01       	movw	r30, r18
 4e4:	20 81       	ld	r18, Z
 4e6:	28 60       	ori	r18, 0x08	; 8
 4e8:	fc 01       	movw	r30, r24
 4ea:	20 83       	st	Z, r18
	TCCR1B |= (1<<WGM13);
 4ec:	8e e4       	ldi	r24, 0x4E	; 78
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	2e e4       	ldi	r18, 0x4E	; 78
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	f9 01       	movw	r30, r18
 4f6:	20 81       	ld	r18, Z
 4f8:	20 61       	ori	r18, 0x10	; 16
 4fa:	fc 01       	movw	r30, r24
 4fc:	20 83       	st	Z, r18
	/*Top Value ICR1H & ICR1L*/
	ICR1H = 0x06;
 4fe:	87 e4       	ldi	r24, 0x47	; 71
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	26 e0       	ldi	r18, 0x06	; 6
 504:	fc 01       	movw	r30, r24
 506:	20 83       	st	Z, r18
	ICR1L = 0x3F;
 508:	86 e4       	ldi	r24, 0x46	; 70
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	2f e3       	ldi	r18, 0x3F	; 63
 50e:	fc 01       	movw	r30, r24
 510:	20 83       	st	Z, r18
	/*OCR1H && OCR1L*/
	/*0x03 0x20*/
	OCR1AH = 0x06;
 512:	8b e4       	ldi	r24, 0x4B	; 75
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	26 e0       	ldi	r18, 0x06	; 6
 518:	fc 01       	movw	r30, r24
 51a:	20 83       	st	Z, r18
	OCR1AL = 0x3F;
 51c:	8a e4       	ldi	r24, 0x4A	; 74
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	2f e3       	ldi	r18, 0x3F	; 63
 522:	fc 01       	movw	r30, r24
 524:	20 83       	st	Z, r18
 526:	00 00       	nop
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <_exit>:
 52e:	f8 94       	cli

00000530 <__stop_program>:
 530:	ff cf       	rjmp	.-2      	; 0x530 <__stop_program>
